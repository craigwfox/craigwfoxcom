---
import Layout from "../../layouts/Base.astro"
import { getCollection } from "astro:content"
import { Image } from "astro:assets"
import FormattedDate from "../../components/FormattedDate.astro"

type NullableDate = Date | null

function compareDates(
	a: {
		id?: string
		render?: () => Render[".md"]
		slug?: string
		body?: string
		collection?: "reading"
		data: any
		rendered?: RenderedContent | undefined
		filePath?: string | undefined
	},
	b: {
		id?: string
		render?: () => Render[".md"]
		slug?: string
		body?: string
		collection?: "reading"
		data: any
		rendered?: RenderedContent | undefined
		filePath?: string | undefined
	}
) {
	if (b.data.endDate && a.data.endDate) {
		return (
			b.data.endDate.valueOf() - a.data.endDate.valueOf()
		)
	} else {
		return false
	}
}

function refineBookDate(book: {
	id?: string
	render?: () => Render[".md"]
	slug?: string
	body?: string
	collection?: "reading"
	data: any
	rendered?: RenderedContent | undefined
	filePath?: string | undefined
}): any {
	const updatedBook = book.data
	let startDate: NullableDate = null
	let endDate: NullableDate = null
	let publishDate: NullableDate = null

	if (book.data.startDate)
		startDate = new Date(
			new Date(book.data.startDate)
				.toISOString()
				.replaceAll(/-/g, "\/")
				.replace(/T.+/, "")
		)

	if (book.data.endDate)
		endDate = new Date(
			new Date(book.data.endDate)
				.toISOString()
				.replaceAll(/-/g, "\/")
				.replace(/T.+/, "")
		)

	if (book.data.publishDate)
		publishDate = new Date(
			new Date(book.data.publishDate)
				.toISOString()
				.replaceAll(/-/g, "\/")
				.replace(/T.+/, "")
		)

	const fullDate = endDate ? endDate : startDate

	if (fullDate)
		updatedBook["imageSrc"] =
			`/images/covers/${book.data.isbn}.webp`

	if (book.data.startDate && startDate)
		updatedBook.startDate = startDate
	if (book.data.endDate && endDate)
		updatedBook.endDate = endDate
	if (book.data.publishDate && publishDate)
		updatedBook.publishDate = publishDate
	return updatedBook
}

function getPercentage(min: number, max: number) {
	const percentage = Math.round((min / max) * 100)
	return `${percentage < 100 ? percentage : 100}%`
}

const finishedBooks = (await getCollection("reading"))
	.filter(
		x =>
			x.data.Finished == "Finished" &&
			x.data.readType != "audio"
	)
	.sort((a, b) => compareDates(a, b))
	.map(x => refineBookDate(x))

const sortedByRating = [...finishedBooks].sort((a, b) => {
	return b.ratingBook - a.ratingBook
})

const yearCounts = {
	most: 0,
	pagesTotal: 0,
	booksRead: 0,
	years: {
		"2020": {
			label: "2020",
			count: 0,
			goal: 20,
		},
		"2021": {
			label: "2021",
			count: 0,
			goal: 20,
		},
		"2022": {
			label: "2022",
			count: 0,
			goal: 30,
		},
		"2023": {
			label: "2023",
			count: 0,
			goal: 30,
		},
		"2024": {
			label: "2024",
			count: 0,
			goal: 15,
		},
		"2025": {
			label: "2025",
			count: 0,
			goal: 30,
		},
	},
}
finishedBooks.forEach(book => {
	const year = new Date(book.endDate).getFullYear()
	yearCounts.years[year].count += 1
	yearCounts.booksRead++
	yearCounts.pagesTotal += parseInt(book.pageCount)
})

yearCounts.most = Object.values(yearCounts.years).sort(
	(a, b) => b.count - a.count
)[0].count
---

<script>
	const cards = document.querySelectorAll(
		".collection-cards__card"
	)
	function clearAllActives() {
		cards.forEach(card => {
			card.classList.remove("active")
		})
	}

	cards.forEach(card => {
		card.addEventListener("mouseenter", () => {
			clearAllActives()
			card.classList.add("active")
		})
		card.addEventListener("mouseleave", () => {
			card.classList.remove("active")
		})
	})
</script>

<Layout title="Reading list">
	<h1>Stuff I've read</h1>

	<div class="content-grid content-grid--collection">
		<aside class="collection-sidebar">
			<details open>
				<summary>Reading stats</summary>
				<div>
					<h2>Totals</h2>
					<table class="collection-stats">
						<tbody>
							<tr>
								<th scope="row">Books:</th>
								<td>{yearCounts.booksRead}</td>
							</tr>
							<tr>
								<th scope="row">Pages:</th>
								<td>{yearCounts.pagesTotal}</td>
							</tr>
							{
								Object.values(yearCounts.years).map(
									(year): object => (
										<tr
											style={`--percentage: ${getPercentage(year.count, year.goal)};`}
										>
											<th scope="row">{year.label}:</th>
											<td class="graph">{year.count}</td>
										</tr>
									)
								)
							}
						</tbody>
					</table>
					<h2>Top 5</h2>
					<table>
						{
							Object.values(sortedByRating.slice(0, 5)).map(
								(book): object => (
									<tr>
										<th scope="row">{book.title}</th>
										<td>{book.ratingBook}</td>
									</tr>
								)
							)
						}
					</table>
				</div>
			</details>
		</aside>
		<div class="collection-cards">
			{
				finishedBooks.map(book => (
					<article class="collection-cards__card">
						{book["imageSrc"] && (
							<Image
								class="collection-cards__card__image"
								src={book["imageSrc"]}
								alt=""
								width={400}
								height={400}
								loading={"lazy"}
							/>
						)}
						<p class="collection-cards__card__date">
							Finished:{" "}
							<FormattedDate date={book.endDate} />
						</p>
						<div class="collection-cards__card__content">
							<h3>
								{book.author.map(author => (
									<span>{author}</span>
								))}
							</h3>
							<h2>{book.title}</h2>
							<table>
								<tbody>
									<tr>
										<th scope="row">Finished:</th>
										<td>
											<FormattedDate date={book.endDate} />
										</td>
									</tr>
									<tr>
										<th scope="row">Type:</th>
										<td>{book.readType}</td>
									</tr>
									<tr>
										<th scope="row">Rating:</th>
										<td>{book.ratingBook} / 5</td>
									</tr>
								</tbody>
							</table>
						</div>
					</article>
				))
			}
		</div>
	</div>
</Layout>
